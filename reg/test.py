# -*- coding: utf-8 -*-

import re

if __name__ == '__main__':
    # ^，以什么开头，^b，表示必须以b开头
    # .，表示任意字符
    # *，前面的字符可以重复任意多次
    # $，表示以前面的字符结尾
    # regex_str = '^b.*3$'      # 以b开头，后面是任意字符，可以出现任意多次，并且以3结尾的

    # 贪婪模式从后面开始匹配，非贪婪模式从前面开始匹配
    # regex_str = '.*?(b.*?b).*'  # 从左边开始匹配，匹配到第一个开始，进入(b.*b)模式，中间是什么不管，再次非贪婪匹配，遇到b，提取出来

    # ()，代表字符串提取的模式
    # +，前面的字符至少出现一次
    # regex_str = '.*(b.+b).*'  # b和b之间，.任意字符至少出现一次

    # {}，限定词，限定前面的字符出现的次数
    # regex_str = '.*(b.{3,9}b).*'

    # |，或，模式匹配任意一个
    # regex_str = '((bobby|boobby)123)'

    # []，匹配括号内任意字符、匹配区间、匹配不等于、匹配的原始含义，无特殊含义了
    # regex_str = '([abcd]obby123)'
    # regex_str = '(1[345678][^1]{9})'    # 以1开头，第二个数字是34578中的任意一个，后面不等于1的任意一个数字，出现9次
    # regex_str = '(1[.][^1]{9})'    # 以1开头，第二个为.，这时.不再代表任意字符，后面不等于1的任意一个数字，出现9次
    # line = '16781722933'

    # \s，空格
    # regex_str = '(你\s好)'    # 你和好中间为空格
    # regex_str = '(你\S好)'    # 你和好中间不为空格
    # line = '你 好'

    # \w
    # regex_str = '(你\W好)'    # \w,任意字符，包括[A-Za-z0-9_]；\W，不为\w
    # line = '你 好'

    # [\u4E00-\u9FA5]，汉字
    # regex_str = '.*?([\u4E00-\u9FA5]+大学)'  # 不管几个汉字都提取出来，+，前面的汉字只要出现一次就可以
    # line = 'study in 南京大学'

    # \d，数字
    # regex_str = '.*?(\d+)年'  # 非贪婪模式匹配年
    # regex_str = '.*(\d{4})年'  # 限定次数匹配年
    # line = '出生于2019年'

    # ^，限定必须以后面的字符开头
    # $，限定必须以前面的字符结尾
    # *，限定前面的字符出现任意多次，包括0次，>=0
    # +，限定前面的字符出现至少一次，>=1
    # ?，非贪婪模式
    # {2}{2,}{2,5}，限定前面的词出现的次数，出现2次，出现次数>=2，2<=出现次数<=5
    # |，两旁的词出现任意一个
    # [][^][a-z]，出现里面任何一个都可以；有^，非，不等于，取反；a-z之间都可以
    # .，包含所有字符
    # \s，空格
    # \S，非空格
    # \w，数字、字母、下划线[A-Za-z0-9_]
    # \W，非\w
    # [\u4E00-\u9FA5]，汉字
    # ()，提取子字符串
    #
    # \d，数字

    regex_str = '.*出生于(\d{4}[年/-]\d{1,2}([月/-]$|[月/-]\d{1,2}|$))'  # 限定次数匹配年
    # line = 'XXX出生于2019年11月'
    # line = 'XXX出生于2019/6/1'
    # line = 'XXX出生于2019-6-1'
    # line = 'XXX出生于2019-06-01'
    line = 'XXX出生于2019-06'
    match_obj = re.match(regex_str, line)
    if match_obj:
        print('yes')
        print(match_obj.group(1))
